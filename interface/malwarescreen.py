import tkinter as tk
from tkinter import W, N, E, S, X, Y, StringVar, font, filedialog, messagebox
from tkinter.messagebox import showinfo
import threading
from threading import Thread
#from malwarecountdown import MalwareTimer
from datetime import datetime, timedelta
from time import sleep
from interface.styling import BG_BUTTON_COLOUR, BG_COLOR, BG_COLOR_2, BOLD_FONT, FG_COLOR, FG_COLOR_2, GLOBAL_FONT, HEADING_FONT


class MalwareScreenView(tk.Frame):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        print('malware screen called')

        self.configure(bg=BG_COLOR)
        self.background_image = tk.PhotoImage(file='images/skull.png')
        self._heading = "CONTI RaaS"
        self._ransome_text = '''If you are reading this, that means that your organisation was successfullly breached by CONTI team. All of your files, databases, applications, cryptogrphic keys etc have been exfiltrated and we have encrypted your copies with military-grade algoriothms. If you are looking for a free decryption tool right now - there's none. Antivirus labs,  researchers, security solution providers, law agencies won't help you.
        \n If you are interested in our assistance upon this matter - you should upload the README.TXT file to be provided with further instructions'''
        self.countdown_display = tk.StringVar(value = '0000/00/00 00:00:00')
        self.bitcoin_wallet = 'Bitcoin wallet: 34KWHETD3YXmJYRehWmPd4MebXgQtvfYUR'
        

        # content
        self._image_placement = tk.Label(self, image=self.background_image, border=0)
        self._heading = tk.Label(self, text=self._heading, justify='left', font=HEADING_FONT, bg=BG_COLOR, fg=FG_COLOR)
        self._ransom_instructions = tk.Label(self, text=self._ransome_text, wraplength=600, justify='left', font=BOLD_FONT, bg=BG_COLOR, fg=FG_COLOR)
        self._countdown_label = tk.Label(self, textvariable=self.countdown_display, font=BOLD_FONT, bg=BG_COLOR, fg=FG_COLOR)
        self._wallet_address = tk.Label(self, text=self.bitcoin_wallet, font=BOLD_FONT, bg=BG_COLOR, fg=FG_COLOR)
        
        #Placement
        self._image_placement.grid(row=0, column=4, rowspan=5)
        self._heading.grid(row=0, column=0, columnspan=2)
        self._ransom_instructions.grid(row=1, column=0, rowspan=3, columnspan=3)

        self._upload_box = tk.Entry(self, font=GLOBAL_FONT, bg=BG_BUTTON_COLOUR)
        self._upload_box.insert(0, 'README.txt')
        self.upload_button = tk.Button(self, text="Upload file", font=GLOBAL_FONT, bg=BG_BUTTON_COLOUR, fg=BG_COLOR, command=self.upload_readme)
        self._upload_box.grid(row=4, column=0)
        self.upload_button.grid(row=4, column=1)
        self._countdown_label.grid(row=6, column=0, columnspan=5)

        self._wallet_address.grid(row=7, column=0, columnspan=5)
        

    def begin_countdown(self):
        malware_countdown = MalwareTimer()
        countdown_thread = threading.Thread(target=malware_countdown.run_timer, args=(self.countdown_display,))
        countdown_thread.start()

    def upload_readme(self):
        self._upload_box.delete(0, 'end')
        self._upload_box.insert(0,'-----------------')
        messagebox.showinfo("SUCCESS", 'Thank you for choosing to seek our assistance. A representative will be in touch shortly to deliver instructions')
        self.upload_button['state'] = "disabled"



class MalwareTimer(Thread):
    def __init__(self) -> None:
        super().__init__()
        self.today = datetime.now()
        self.termination_time = datetime.strptime('20:00', '%H:%M') 
        self.playing = True
    
    def run_timer(self, timer_val: tk.StringVar):
        while self.playing:
            time_now = (datetime.now())
            todays_date = datetime.today()
            remaining = time_now.combine(todays_date, self.termination_time.time()) - time_now.combine(todays_date, time_now.time())
            remaining = remaining - timedelta(microseconds=remaining.microseconds)
            timer_val.set(f'TIME UNTIL PERMENANT DATA lOSS: {remaining}')
            if remaining <= timedelta(microseconds=0) :
                self.playing = False
                timer_val.set(f'TIME UNTIL PERMENANT DATA lOSS: 00:00:00.000000')
            sleep(0.5)
        
