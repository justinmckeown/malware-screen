from cgitb import text
from ctypes import alignment
from fileinput import filename
import logging
from operator import contains
from pickle import GLOBAL
from ssl import AlertDescription
import tkinter as tk
from tkinter import W, N, E, S, X, Y, StringVar
from tkinter import font
from tkinter import filedialog
from tkinter import messagebox
from tkinter.messagebox import showinfo
from tkinter.ttk import *
from datetime import datetime
import threading
from malwarecountdown import MalwareTimer 
from pathlib import Path

from numpy import size
from pygments import highlight
from interface.styling import BG_BUTTON_COLOUR, BG_COLOR, BG_COLOR_2, BOLD_FONT, FG_COLOR, FG_COLOR_2, GLOBAL_FONT, HEADING_FONT

logger = logging.getLogger()


class MalwareScreenView(tk.Frame):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        print('malware screen called')

        self.configure(bg=BG_COLOR)
        self.background_image = tk.PhotoImage(file='skull.png')
        self._heading = "CONTI RaaS"
        self._ransome_text = '''If you are looking reading this right now, that means that your network was successfullly breached by CONTI team. All of your files, databases, application files etc were encrypted with military-grade algoriothms. If you are looking for a free decryption tool right now - there's none. Antivirus labs,  researchers, security solution providers, law agencies won't help you to decrypt the data.\n If you are interested in our assistance upon this matter - you should upload README.TXT file to be provided with further instructions upon decryption
        '''
        self.countdown_display = tk.StringVar(value = '0000/00/00 00:00:00')
        

        # content
        self._image_placement = tk.Label(self, image=self.background_image, border=0)
        self._heading = tk.Label(self, text=self._heading, justify='left', font=HEADING_FONT, bg=BG_COLOR, fg=FG_COLOR)
        self._ransom_instructions = tk.Label(self, text=self._ransome_text, wraplength=500, justify='left', font=BOLD_FONT, bg=BG_COLOR, fg=FG_COLOR)
        self._countdown_label = tk.Label(self, textvariable=self.countdown_display, font=BOLD_FONT, bg=BG_COLOR, fg=FG_COLOR)
        
        #Placement
        self._image_placement.grid(row=0, column=4, rowspan=5)
        self._heading.grid(row=0, column=0, columnspan=2)
        self._ransom_instructions.grid(row=1, column=0, rowspan=3, columnspan=3)

        self._upload_box = tk.Entry(self, font=GLOBAL_FONT, bg=BG_BUTTON_COLOUR)
        self._upload_box.insert(0, 'README.txt')
        self.upload_button = tk.Button(self, text="Upload", font=GLOBAL_FONT, bg=BG_BUTTON_COLOUR, fg=BG_COLOR, command=self.upload_readme)
        self._upload_box.grid(row=4, column=0)
        self.upload_button.grid(row=4, column=1)
        self._countdown_label.grid(row=6, column=0, columnspan=5)
        
        malware_countdown = MalwareTimer(timer_val=self.countdown_display)
        #malware_countdown.run(self.countdown_display)
        malware_countdown.start()

        #TODO: Old way keep using or delete
        #countdown_thread = threading.Thread(target=self._run_countdown)
        #countdown_thread.start()
        
    def upload_readme(self):
        print(f'Button clicked')
        #self.malware_countdown.show_dialgoues()
        self._upload_box.delete(0, 'end')
        self._upload_box.insert(0,'-----------------')
        messagebox.showinfo("SUCCESS", 'Thank you for choosing to see our assistance. A representative will be in touch shortly')
  



    def _run_countdown(self):
        self.malware_countdown.run_timer(self.countdown_display)


        
        
